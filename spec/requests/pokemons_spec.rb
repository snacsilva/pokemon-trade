 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/pokemons", type: :request do

  describe "GET /index" do
    let!(:charmander) { create(:charmander) }

    it "returns HTTP 200" do
      get pokemons_path, params: { query: "char" }
      expect(response).to have_http_status(200)
    end

    it "returns a pokemon list" do
      get pokemons_path, params: { query: "char" }
      expect(JSON.parse(response.body)).to include(hash_including({
                                                                    "name" => charmander.name,
                                                                    "base_experience" => charmander.base_experience
                                                                  }))
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_pokemon_url
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    subject(:create_pokemon) { post pokemons_path, params: { name: name } }

    let(:name) { "tentacruel" }

    context "with valid params" do
      before do
        stub_request(:get, "https://pokeapi.co/api/v2/pokemon/tentacruel")
          .to_return(status: 200, body: { name: "tentacruel", base_experience: 180, id: 73 }.to_json)
      end

      it "redirects to new_pokemon_path" do
        create_pokemon
        expect(response).to redirect_to(new_pokemon_path)
      end

      it "sends a flash notice" do
        create_pokemon
        expect(flash[:notice]).to eq("Pokemon created successfully")
      end

      it "creates a new pokemon querying the PokeAPI" do
        expect { create_pokemon }.to change(Pokemon, :count).by(1)
      end
    end

    context "with empty params" do
      let(:name) { "" }

      before do
        stub_request(:get, "https://pokeapi.co/api/v2/pokemon/")
          .to_return(status: 200, body: { name: "", base_experience: 180, id: 73 }.to_json)
      end

      it "redirects to new_pokemon_path" do
        create_pokemon
        expect(response).to redirect_to(new_pokemon_path)
      end

      it "sends a flash error" do
        create_pokemon
        expect(flash[:error]).to eq("Empty pokemon name. Insert a name!")
      end
    end

    context "with invalid params" do
      let(:name) { "zip" }

      before do
        stub_request(:get, "https://pokeapi.co/api/v2/pokemon/#{name}")
          .to_return(status: 200, body: "not found")
      end

      it "redirects to new_pokemon_path" do
        create_pokemon
        expect(response).to redirect_to(new_pokemon_path)
      end

      it "sends a flash error" do
        create_pokemon
        expect(flash[:error]).to eq("What you're try to add ('zip') is not a pokemon! =(")
      end
    end

    context "with a already created pokemon" do
      before do
        create(:pokemon, name: name)

        stub_request(:get, "https://pokeapi.co/api/v2/pokemon/#{name}")
          .to_return(status: 200, body: { name: name, base_experience: 180, id: 73 }.to_json)
      end

      it "redirects to new_pokemon_path" do
        create_pokemon
        expect(response).to redirect_to(new_pokemon_path)
      end
    end
  end
end
