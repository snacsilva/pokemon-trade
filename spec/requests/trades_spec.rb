 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/trades", type: :request do
  let(:tentacruel) { create(:tentacruel) }
  let(:dragonite) { create(:dragonite) }
  let(:mew) { create(:mew) }
  let(:params) { { left: [mew.name], right: [dragonite.name] } }
  let(:params_1) { { left: [tentacruel.name], right: [dragonite.name] } }

  describe "POST /trades" do
    subject(:create_trade_request) do
      post "/trades", params: params
    end

    context "with valid params" do
      it "responds with HTTP 302" do
        create_trade_request
        expect(response).to have_http_status(200)
      end

      it "creates a new trade" do
        expect { create_trade_request }.to change(Trade, :count).by(1)
      end
    end
  end

  describe "POST /trades/simulate" do
    subject(:simulate_trade) { post "/trades/simulate", params: params }
    subject(:simulate_trade_1) { post "/trades/simulate", params: params_1 }
    let(:response_body) { JSON.parse(response.body) }
    
    it "returns HTTP 200" do
      simulate_trade
      expect(response).to have_http_status(200)
    end
    
    it "returns the trade fairness" do
      simulate_trade
      expect(response_body).to include({ "fair" => true })
    end
    
    it "returns the trade unfair" do
      simulate_trade_1
      expect(response_body).to include({ "fair" => false })
    end
  end
end
